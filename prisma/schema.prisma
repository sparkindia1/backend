generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  BUYER
  SELLER
}

enum Status {
  CREATED
  RECEIVED
  PACKED
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

// requires phone or email for buyer and both for seller
model User {
  id              Int            @id @default(autoincrement())
  phone           String         @unique @db.VarChar(15)
  password        String
  email           String         @unique
  role            Role           @default(BUYER)
  deleted         Boolean        @default(false)
  verified        Boolean        @default(false)
  updatedAt       DateTime       @updatedAt
  buyerProfileId  Int?
  buyerProfile    BuyerProfile?  @relation(fields: [buyerProfileId], references: [id])
  sellerProfileId Int?
  sellerProfile   SellerProfile? @relation(fields: [sellerProfileId], references: [id])
  tempUser        TempUser?
  reviews         Review[]
  orders          Order[]
  tempOrders      TempOrder[]
  warnings        UserWarnings[]
}

model TempUser {
  id     Int    @id @default(autoincrement())
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id])
  otp    String
}

model UserWarnings {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  reason    String
  severity  Int
  updatedAt DateTime @updatedAt
}

model BuyerProfile {
  id     Int    @id @default(autoincrement())
  userId Int    @unique
  user   User[]
}

model SellerProfile {
  id                              Int       @id @default(autoincrement())
  userId                          Int       @unique
  companyName                     String
  companyUsername                 String    @unique
  businessEmail                   String
  businessPhone                   String
  pincode                         String
  city                            String
  state                           String
  address                         String
  productIds                      Int[]
  gstNumber                       String?
  panNumber                       String?
  udyogAadharNumber               String?
  startupIndiaRegistrationNumber  String?
  companyIncorporationCertificate String? // pdf url
  businessLogo                    String? // image url
  profileCompletePercentage       Int       @default(0)
  verifiedSeller                  Boolean   @default(false) // true if admin verifies
  updatedAt                       DateTime  @updatedAt
  products                        Product[]
  user                            User[]
}

// can be 3 levels deep
// category => sub-category => sub-sub-category
model Category {
  id        Int       @id @default(autoincrement())
  name      String
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id                        Int           @id @default(autoincrement())
  name                      String
  levelOneLimit             String?
  pricePerProductLevelOne   Int
  levelTwoLimit             String?
  pricePerProductLevelTwo   Int
  levelThreeLimit           String?
  pricePerProductLevelThree Int
  levelFourLimit            String?
  pricePerProductLevelFour  Int
  levelFiveLimit            String?
  pricePerProductLevelFive  Int
  ownerId                   Int // relatio to seller ID
  description               String
  imageUrl                  String[]
  stock                     Int
  categoryId                Int // relation to Category ID
  categories                Category      @relation(fields: [categoryId], references: [id])
  brandId                   Int // seller Brand 
  sellerProfile             SellerProfile @relation(fields: [ownerId], references: [id])
  verified                  Boolean       @default(false)
  deleted                   Boolean       @default(false)
  trending                  Boolean       @default(false)
  updatedAt                 DateTime      @updatedAt
  reviews                   Review[]
  tempProduct               TempProduct[]
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int // relation to Product ID
  product   Product  @relation(fields: [productId], references: [id])
  userId    Int // relation to User ID
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  comment   String
  updatedAt DateTime @updatedAt
}

model TempProduct {
  id        Int     @id @default(autoincrement())
  productId Int     @unique
  product   Product @relation(fields: [productId], references: [id])
  otp       String
}

model Order {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  productIds      Int[]
  shippingAddress String
  paymentMethod   String
  itemsCharges    Float
  taxCharges      Float
  shippingCharges Float
  otherCharges    Float
  status          Status   @default(CREATED)
  updatedAt       DateTime @updatedAt
}

model TempOrder {
  id     Int    @id @default(autoincrement())
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id])
  otp    String
}
